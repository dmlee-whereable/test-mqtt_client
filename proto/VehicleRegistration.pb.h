// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VehicleRegistration.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_VehicleRegistration_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_VehicleRegistration_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_VehicleRegistration_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_VehicleRegistration_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_VehicleRegistration_2eproto;
namespace whereable {
namespace t2am {
class VehicleRegistration;
class VehicleRegistrationDefaultTypeInternal;
extern VehicleRegistrationDefaultTypeInternal _VehicleRegistration_default_instance_;
class VehicleRegistrationResponse;
class VehicleRegistrationResponseDefaultTypeInternal;
extern VehicleRegistrationResponseDefaultTypeInternal _VehicleRegistrationResponse_default_instance_;
}  // namespace t2am
}  // namespace whereable
PROTOBUF_NAMESPACE_OPEN
template<> ::whereable::t2am::VehicleRegistration* Arena::CreateMaybeMessage<::whereable::t2am::VehicleRegistration>(Arena*);
template<> ::whereable::t2am::VehicleRegistrationResponse* Arena::CreateMaybeMessage<::whereable::t2am::VehicleRegistrationResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace whereable {
namespace t2am {

// ===================================================================

class VehicleRegistration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:whereable.t2am.VehicleRegistration) */ {
 public:
  inline VehicleRegistration() : VehicleRegistration(nullptr) {};
  virtual ~VehicleRegistration();

  VehicleRegistration(const VehicleRegistration& from);
  VehicleRegistration(VehicleRegistration&& from) noexcept
    : VehicleRegistration() {
    *this = ::std::move(from);
  }

  inline VehicleRegistration& operator=(const VehicleRegistration& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleRegistration& operator=(VehicleRegistration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleRegistration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleRegistration* internal_default_instance() {
    return reinterpret_cast<const VehicleRegistration*>(
               &_VehicleRegistration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VehicleRegistration& a, VehicleRegistration& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleRegistration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleRegistration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleRegistration* New() const final {
    return CreateMaybeMessage<VehicleRegistration>(nullptr);
  }

  VehicleRegistration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleRegistration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleRegistration& from);
  void MergeFrom(const VehicleRegistration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleRegistration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "whereable.t2am.VehicleRegistration";
  }
  protected:
  explicit VehicleRegistration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_VehicleRegistration_2eproto);
    return ::descriptor_table_VehicleRegistration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .whereable.t2am.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::whereable::t2am::Header& header() const;
  ::whereable::t2am::Header* release_header();
  ::whereable::t2am::Header* mutable_header();
  void set_allocated_header(::whereable::t2am::Header* header);
  private:
  const ::whereable::t2am::Header& _internal_header() const;
  ::whereable::t2am::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::whereable::t2am::Header* header);
  ::whereable::t2am::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:whereable.t2am.VehicleRegistration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::whereable::t2am::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_VehicleRegistration_2eproto;
};
// -------------------------------------------------------------------

class VehicleRegistrationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:whereable.t2am.VehicleRegistrationResponse) */ {
 public:
  inline VehicleRegistrationResponse() : VehicleRegistrationResponse(nullptr) {};
  virtual ~VehicleRegistrationResponse();

  VehicleRegistrationResponse(const VehicleRegistrationResponse& from);
  VehicleRegistrationResponse(VehicleRegistrationResponse&& from) noexcept
    : VehicleRegistrationResponse() {
    *this = ::std::move(from);
  }

  inline VehicleRegistrationResponse& operator=(const VehicleRegistrationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleRegistrationResponse& operator=(VehicleRegistrationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleRegistrationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleRegistrationResponse* internal_default_instance() {
    return reinterpret_cast<const VehicleRegistrationResponse*>(
               &_VehicleRegistrationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VehicleRegistrationResponse& a, VehicleRegistrationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleRegistrationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleRegistrationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleRegistrationResponse* New() const final {
    return CreateMaybeMessage<VehicleRegistrationResponse>(nullptr);
  }

  VehicleRegistrationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleRegistrationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleRegistrationResponse& from);
  void MergeFrom(const VehicleRegistrationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleRegistrationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "whereable.t2am.VehicleRegistrationResponse";
  }
  protected:
  explicit VehicleRegistrationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_VehicleRegistration_2eproto);
    return ::descriptor_table_VehicleRegistration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleIdFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // string vehicle_id = 2;
  void clear_vehicle_id();
  const std::string& vehicle_id() const;
  void set_vehicle_id(const std::string& value);
  void set_vehicle_id(std::string&& value);
  void set_vehicle_id(const char* value);
  void set_vehicle_id(const char* value, size_t size);
  std::string* mutable_vehicle_id();
  std::string* release_vehicle_id();
  void set_allocated_vehicle_id(std::string* vehicle_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vehicle_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vehicle_id(
      std::string* vehicle_id);
  private:
  const std::string& _internal_vehicle_id() const;
  void _internal_set_vehicle_id(const std::string& value);
  std::string* _internal_mutable_vehicle_id();
  public:

  // .whereable.t2am.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::whereable::t2am::Header& header() const;
  ::whereable::t2am::Header* release_header();
  ::whereable::t2am::Header* mutable_header();
  void set_allocated_header(::whereable::t2am::Header* header);
  private:
  const ::whereable::t2am::Header& _internal_header() const;
  ::whereable::t2am::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::whereable::t2am::Header* header);
  ::whereable::t2am::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:whereable.t2am.VehicleRegistrationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vehicle_id_;
  ::whereable::t2am::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_VehicleRegistration_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VehicleRegistration

// .whereable.t2am.Header header = 1;
inline bool VehicleRegistration::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool VehicleRegistration::has_header() const {
  return _internal_has_header();
}
inline const ::whereable::t2am::Header& VehicleRegistration::_internal_header() const {
  const ::whereable::t2am::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::whereable::t2am::Header*>(
      &::whereable::t2am::_Header_default_instance_);
}
inline const ::whereable::t2am::Header& VehicleRegistration::header() const {
  // @@protoc_insertion_point(field_get:whereable.t2am.VehicleRegistration.header)
  return _internal_header();
}
inline void VehicleRegistration::unsafe_arena_set_allocated_header(
    ::whereable::t2am::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:whereable.t2am.VehicleRegistration.header)
}
inline ::whereable::t2am::Header* VehicleRegistration::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::whereable::t2am::Header* VehicleRegistration::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:whereable.t2am.VehicleRegistration.header)
  
  ::whereable::t2am::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::whereable::t2am::Header* VehicleRegistration::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::whereable::t2am::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::whereable::t2am::Header* VehicleRegistration::mutable_header() {
  // @@protoc_insertion_point(field_mutable:whereable.t2am.VehicleRegistration.header)
  return _internal_mutable_header();
}
inline void VehicleRegistration::set_allocated_header(::whereable::t2am::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:whereable.t2am.VehicleRegistration.header)
}

// -------------------------------------------------------------------

// VehicleRegistrationResponse

// .whereable.t2am.Header header = 1;
inline bool VehicleRegistrationResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool VehicleRegistrationResponse::has_header() const {
  return _internal_has_header();
}
inline const ::whereable::t2am::Header& VehicleRegistrationResponse::_internal_header() const {
  const ::whereable::t2am::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::whereable::t2am::Header*>(
      &::whereable::t2am::_Header_default_instance_);
}
inline const ::whereable::t2am::Header& VehicleRegistrationResponse::header() const {
  // @@protoc_insertion_point(field_get:whereable.t2am.VehicleRegistrationResponse.header)
  return _internal_header();
}
inline void VehicleRegistrationResponse::unsafe_arena_set_allocated_header(
    ::whereable::t2am::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:whereable.t2am.VehicleRegistrationResponse.header)
}
inline ::whereable::t2am::Header* VehicleRegistrationResponse::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::whereable::t2am::Header* VehicleRegistrationResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:whereable.t2am.VehicleRegistrationResponse.header)
  
  ::whereable::t2am::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::whereable::t2am::Header* VehicleRegistrationResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::whereable::t2am::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::whereable::t2am::Header* VehicleRegistrationResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:whereable.t2am.VehicleRegistrationResponse.header)
  return _internal_mutable_header();
}
inline void VehicleRegistrationResponse::set_allocated_header(::whereable::t2am::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:whereable.t2am.VehicleRegistrationResponse.header)
}

// string vehicle_id = 2;
inline void VehicleRegistrationResponse::clear_vehicle_id() {
  vehicle_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VehicleRegistrationResponse::vehicle_id() const {
  // @@protoc_insertion_point(field_get:whereable.t2am.VehicleRegistrationResponse.vehicle_id)
  return _internal_vehicle_id();
}
inline void VehicleRegistrationResponse::set_vehicle_id(const std::string& value) {
  _internal_set_vehicle_id(value);
  // @@protoc_insertion_point(field_set:whereable.t2am.VehicleRegistrationResponse.vehicle_id)
}
inline std::string* VehicleRegistrationResponse::mutable_vehicle_id() {
  // @@protoc_insertion_point(field_mutable:whereable.t2am.VehicleRegistrationResponse.vehicle_id)
  return _internal_mutable_vehicle_id();
}
inline const std::string& VehicleRegistrationResponse::_internal_vehicle_id() const {
  return vehicle_id_.Get();
}
inline void VehicleRegistrationResponse::_internal_set_vehicle_id(const std::string& value) {
  
  vehicle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VehicleRegistrationResponse::set_vehicle_id(std::string&& value) {
  
  vehicle_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:whereable.t2am.VehicleRegistrationResponse.vehicle_id)
}
inline void VehicleRegistrationResponse::set_vehicle_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vehicle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:whereable.t2am.VehicleRegistrationResponse.vehicle_id)
}
inline void VehicleRegistrationResponse::set_vehicle_id(const char* value,
    size_t size) {
  
  vehicle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:whereable.t2am.VehicleRegistrationResponse.vehicle_id)
}
inline std::string* VehicleRegistrationResponse::_internal_mutable_vehicle_id() {
  
  return vehicle_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VehicleRegistrationResponse::release_vehicle_id() {
  // @@protoc_insertion_point(field_release:whereable.t2am.VehicleRegistrationResponse.vehicle_id)
  return vehicle_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VehicleRegistrationResponse::set_allocated_vehicle_id(std::string* vehicle_id) {
  if (vehicle_id != nullptr) {
    
  } else {
    
  }
  vehicle_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vehicle_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:whereable.t2am.VehicleRegistrationResponse.vehicle_id)
}
inline std::string* VehicleRegistrationResponse::unsafe_arena_release_vehicle_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:whereable.t2am.VehicleRegistrationResponse.vehicle_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return vehicle_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VehicleRegistrationResponse::unsafe_arena_set_allocated_vehicle_id(
    std::string* vehicle_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vehicle_id != nullptr) {
    
  } else {
    
  }
  vehicle_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vehicle_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:whereable.t2am.VehicleRegistrationResponse.vehicle_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace t2am
}  // namespace whereable

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_VehicleRegistration_2eproto
