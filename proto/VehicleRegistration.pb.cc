// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VehicleRegistration.proto

#include "VehicleRegistration.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Header_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_Header_2eproto;
namespace whereable {
namespace t2am {
class VehicleRegistrationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleRegistration> _instance;
} _VehicleRegistration_default_instance_;
class VehicleRegistrationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleRegistrationResponse> _instance;
} _VehicleRegistrationResponse_default_instance_;
}  // namespace t2am
}  // namespace whereable
static void InitDefaultsscc_info_VehicleRegistration_VehicleRegistration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::whereable::t2am::_VehicleRegistration_default_instance_;
    new (ptr) ::whereable::t2am::VehicleRegistration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::whereable::t2am::VehicleRegistration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehicleRegistration_VehicleRegistration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VehicleRegistration_VehicleRegistration_2eproto}, {
      &scc_info_Header_Header_2eproto.base,}};

static void InitDefaultsscc_info_VehicleRegistrationResponse_VehicleRegistration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::whereable::t2am::_VehicleRegistrationResponse_default_instance_;
    new (ptr) ::whereable::t2am::VehicleRegistrationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::whereable::t2am::VehicleRegistrationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehicleRegistrationResponse_VehicleRegistration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VehicleRegistrationResponse_VehicleRegistration_2eproto}, {
      &scc_info_Header_Header_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_VehicleRegistration_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_VehicleRegistration_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_VehicleRegistration_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_VehicleRegistration_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::whereable::t2am::VehicleRegistration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::whereable::t2am::VehicleRegistration, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::whereable::t2am::VehicleRegistrationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::whereable::t2am::VehicleRegistrationResponse, header_),
  PROTOBUF_FIELD_OFFSET(::whereable::t2am::VehicleRegistrationResponse, vehicle_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::whereable::t2am::VehicleRegistration)},
  { 6, -1, sizeof(::whereable::t2am::VehicleRegistrationResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::whereable::t2am::_VehicleRegistration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::whereable::t2am::_VehicleRegistrationResponse_default_instance_),
};

const char descriptor_table_protodef_VehicleRegistration_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031VehicleRegistration.proto\022\016whereable.t"
  "2am\032\014Header.proto\"=\n\023VehicleRegistration"
  "\022&\n\006header\030\001 \001(\0132\026.whereable.t2am.Header"
  "\"Y\n\033VehicleRegistrationResponse\022&\n\006heade"
  "r\030\001 \001(\0132\026.whereable.t2am.Header\022\022\n\nvehic"
  "le_id\030\002 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_VehicleRegistration_2eproto_deps[1] = {
  &::descriptor_table_Header_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_VehicleRegistration_2eproto_sccs[2] = {
  &scc_info_VehicleRegistration_VehicleRegistration_2eproto.base,
  &scc_info_VehicleRegistrationResponse_VehicleRegistration_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_VehicleRegistration_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_VehicleRegistration_2eproto = {
  false, false, descriptor_table_protodef_VehicleRegistration_2eproto, "VehicleRegistration.proto", 219,
  &descriptor_table_VehicleRegistration_2eproto_once, descriptor_table_VehicleRegistration_2eproto_sccs, descriptor_table_VehicleRegistration_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_VehicleRegistration_2eproto::offsets,
  file_level_metadata_VehicleRegistration_2eproto, 2, file_level_enum_descriptors_VehicleRegistration_2eproto, file_level_service_descriptors_VehicleRegistration_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_VehicleRegistration_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_VehicleRegistration_2eproto)), true);
namespace whereable {
namespace t2am {

// ===================================================================

void VehicleRegistration::InitAsDefaultInstance() {
  ::whereable::t2am::_VehicleRegistration_default_instance_._instance.get_mutable()->header_ = const_cast< ::whereable::t2am::Header*>(
      ::whereable::t2am::Header::internal_default_instance());
}
class VehicleRegistration::_Internal {
 public:
  static const ::whereable::t2am::Header& header(const VehicleRegistration* msg);
};

const ::whereable::t2am::Header&
VehicleRegistration::_Internal::header(const VehicleRegistration* msg) {
  return *msg->header_;
}
void VehicleRegistration::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
VehicleRegistration::VehicleRegistration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:whereable.t2am.VehicleRegistration)
}
VehicleRegistration::VehicleRegistration(const VehicleRegistration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::whereable::t2am::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:whereable.t2am.VehicleRegistration)
}

void VehicleRegistration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleRegistration_VehicleRegistration_2eproto.base);
  header_ = nullptr;
}

VehicleRegistration::~VehicleRegistration() {
  // @@protoc_insertion_point(destructor:whereable.t2am.VehicleRegistration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VehicleRegistration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void VehicleRegistration::ArenaDtor(void* object) {
  VehicleRegistration* _this = reinterpret_cast< VehicleRegistration* >(object);
  (void)_this;
}
void VehicleRegistration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleRegistration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleRegistration& VehicleRegistration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleRegistration_VehicleRegistration_2eproto.base);
  return *internal_default_instance();
}


void VehicleRegistration::Clear() {
// @@protoc_insertion_point(message_clear_start:whereable.t2am.VehicleRegistration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleRegistration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .whereable.t2am.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleRegistration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:whereable.t2am.VehicleRegistration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .whereable.t2am.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:whereable.t2am.VehicleRegistration)
  return target;
}

size_t VehicleRegistration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:whereable.t2am.VehicleRegistration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .whereable.t2am.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleRegistration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:whereable.t2am.VehicleRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleRegistration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleRegistration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:whereable.t2am.VehicleRegistration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:whereable.t2am.VehicleRegistration)
    MergeFrom(*source);
  }
}

void VehicleRegistration::MergeFrom(const VehicleRegistration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whereable.t2am.VehicleRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::whereable::t2am::Header::MergeFrom(from._internal_header());
  }
}

void VehicleRegistration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:whereable.t2am.VehicleRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleRegistration::CopyFrom(const VehicleRegistration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whereable.t2am.VehicleRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleRegistration::IsInitialized() const {
  return true;
}

void VehicleRegistration::InternalSwap(VehicleRegistration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleRegistration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VehicleRegistrationResponse::InitAsDefaultInstance() {
  ::whereable::t2am::_VehicleRegistrationResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::whereable::t2am::Header*>(
      ::whereable::t2am::Header::internal_default_instance());
}
class VehicleRegistrationResponse::_Internal {
 public:
  static const ::whereable::t2am::Header& header(const VehicleRegistrationResponse* msg);
};

const ::whereable::t2am::Header&
VehicleRegistrationResponse::_Internal::header(const VehicleRegistrationResponse* msg) {
  return *msg->header_;
}
void VehicleRegistrationResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
VehicleRegistrationResponse::VehicleRegistrationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:whereable.t2am.VehicleRegistrationResponse)
}
VehicleRegistrationResponse::VehicleRegistrationResponse(const VehicleRegistrationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vehicle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vehicle_id().empty()) {
    vehicle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vehicle_id(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::whereable::t2am::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:whereable.t2am.VehicleRegistrationResponse)
}

void VehicleRegistrationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleRegistrationResponse_VehicleRegistration_2eproto.base);
  vehicle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_ = nullptr;
}

VehicleRegistrationResponse::~VehicleRegistrationResponse() {
  // @@protoc_insertion_point(destructor:whereable.t2am.VehicleRegistrationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VehicleRegistrationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vehicle_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void VehicleRegistrationResponse::ArenaDtor(void* object) {
  VehicleRegistrationResponse* _this = reinterpret_cast< VehicleRegistrationResponse* >(object);
  (void)_this;
}
void VehicleRegistrationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleRegistrationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleRegistrationResponse& VehicleRegistrationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleRegistrationResponse_VehicleRegistration_2eproto.base);
  return *internal_default_instance();
}


void VehicleRegistrationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:whereable.t2am.VehicleRegistrationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vehicle_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleRegistrationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .whereable.t2am.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vehicle_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vehicle_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "whereable.t2am.VehicleRegistrationResponse.vehicle_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleRegistrationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:whereable.t2am.VehicleRegistrationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .whereable.t2am.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string vehicle_id = 2;
  if (this->vehicle_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vehicle_id().data(), static_cast<int>(this->_internal_vehicle_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "whereable.t2am.VehicleRegistrationResponse.vehicle_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vehicle_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:whereable.t2am.VehicleRegistrationResponse)
  return target;
}

size_t VehicleRegistrationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:whereable.t2am.VehicleRegistrationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vehicle_id = 2;
  if (this->vehicle_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vehicle_id());
  }

  // .whereable.t2am.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleRegistrationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:whereable.t2am.VehicleRegistrationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleRegistrationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleRegistrationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:whereable.t2am.VehicleRegistrationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:whereable.t2am.VehicleRegistrationResponse)
    MergeFrom(*source);
  }
}

void VehicleRegistrationResponse::MergeFrom(const VehicleRegistrationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whereable.t2am.VehicleRegistrationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vehicle_id().size() > 0) {
    _internal_set_vehicle_id(from._internal_vehicle_id());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::whereable::t2am::Header::MergeFrom(from._internal_header());
  }
}

void VehicleRegistrationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:whereable.t2am.VehicleRegistrationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleRegistrationResponse::CopyFrom(const VehicleRegistrationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whereable.t2am.VehicleRegistrationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleRegistrationResponse::IsInitialized() const {
  return true;
}

void VehicleRegistrationResponse::InternalSwap(VehicleRegistrationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vehicle_id_.Swap(&other->vehicle_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleRegistrationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace t2am
}  // namespace whereable
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::whereable::t2am::VehicleRegistration* Arena::CreateMaybeMessage< ::whereable::t2am::VehicleRegistration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::whereable::t2am::VehicleRegistration >(arena);
}
template<> PROTOBUF_NOINLINE ::whereable::t2am::VehicleRegistrationResponse* Arena::CreateMaybeMessage< ::whereable::t2am::VehicleRegistrationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::whereable::t2am::VehicleRegistrationResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
